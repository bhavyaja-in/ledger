name: "Copilot Setup Steps"

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-ci.txt

      - name: Copy example configuration files
        run: |
          # Copy categories.yaml.example to categories.yaml if it doesn't exist
          if [ ! -f "config/categories.yaml" ] && [ -f "config/categories.yaml.example" ]; then
            cp config/categories.yaml.example config/categories.yaml
            echo "‚úÖ Copied categories.yaml.example to categories.yaml"
          else
            echo "‚ÑπÔ∏è  categories.yaml already exists or example file not found"
          fi

          # Copy performance_benchmark.json.example to performance_benchmark.json if it doesn't exist
          if [ ! -f "config/performance_benchmark.json" ] && [ -f "config/performance_benchmark.json.example" ]; then
            cp config/performance_benchmark.json.example config/performance_benchmark.json
            echo "‚úÖ Copied performance_benchmark.json.example to performance_benchmark.json"
          else
            echo "‚ÑπÔ∏è  performance_benchmark.json already exists or example file not found"
          fi

      - name: Initialize database and create tables
        env:
          LEDGER_TEST_MODE: "false"
          PYTHONPATH: "."
        run: |
          echo "üîß Initializing database and creating tables..."
          
          # Create database directory if it doesn't exist
          mkdir -p data
          
          # Run database initialization script
          python -c "
          import os
          import sys
          
          # Add src to path
          sys.path.insert(0, 'src')
          
          from src.models.database import DatabaseManager
          from src.utils.config_loader import ConfigLoader
          
          try:
              # Load configuration
              config_loader = ConfigLoader()
              config = config_loader.get_config()
              
              # Initialize database manager
              db_manager = DatabaseManager(config, test_mode=False)
              
              # Create all tables
              db_manager.base.metadata.create_all(db_manager.engine)
              
              print('‚úÖ Database initialized successfully')
              print('‚úÖ All tables created')
              
              # Test database connection
              session = db_manager.get_session()
              session.execute('SELECT 1')
              session.close()
              print('‚úÖ Database connection test passed')
              
          except Exception as e:
              print(f'‚ùå Database initialization failed: {e}')
              sys.exit(1)
          "

      - name: Verify setup
        run: |
          echo "üîç Verifying setup..."
          
          # Check if required files exist
          if [ -f "config/categories.yaml" ]; then
            echo "‚úÖ categories.yaml exists"
          else
            echo "‚ùå categories.yaml missing"
          fi
          
          if [ -f "config/performance_benchmark.json" ]; then
            echo "‚úÖ performance_benchmark.json exists"
          else
            echo "‚ùå performance_benchmark.json missing"
          fi
          
          # Check if database file was created
          if [ -f "data/ledger.db" ]; then
            echo "‚úÖ Database file created"
          else
            echo "‚ÑπÔ∏è  Database file not found (may be using in-memory database)"
          fi
          
          # Test imports
          python -c "
          import sys
          sys.path.insert(0, 'src')
          
          try:
              from src.utils.config_loader import ConfigLoader
              from src.models.database import DatabaseManager
              from src.loaders.database_loader import DatabaseLoader
              print('‚úÖ All critical modules imported successfully')
          except ImportError as e:
              print(f'‚ùå Import error: {e}')
              sys.exit(1)
          "

      - name: Setup complete
        run: |
          echo "üéâ Copilot setup steps completed successfully!"
          echo "üìÅ Configuration files: Ready"
          echo "üóÑÔ∏è  Database: Initialized"
          echo "üêç Python environment: Configured"
          echo "üì¶ Dependencies: Installed"